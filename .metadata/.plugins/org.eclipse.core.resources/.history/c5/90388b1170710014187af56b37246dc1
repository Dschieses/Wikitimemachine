package util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class ApiCaller {

	private final String USER_AGENT = "Mozilla/5.0";
	private String apcontinue = "";

	public void start(String startUrl) throws Exception {
		String startString = sendGet(startUrl);
		JSONObject startJson = getJSON(startString);
		while (getApContinue(startJson)) {
			getPageInfo(startJson);

			// weiter Iterieren mit apcontinue
			startString = sendGet(startUrl + apcontinue);
			startJson = getJSON(startString);
		}

	}

	public String sendGet(String url) throws Exception {

		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		// optional default is GET
		con.setRequestMethod("GET");

		// add request header
		con.setRequestProperty("User-Agent", USER_AGENT);

		int responseCode = con.getResponseCode();
		// System.out.println("\nSending 'GET' request to URL : " + url);
		// System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(
				con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();
		return response.toString();

	}

	private boolean getApContinue(JSONObject json) throws JSONException {
		if (!json.has("query-continue")) {
			apcontinue = "undefined";
			return false;
		}
		apcontinue = getSubJSON(json, "query-continue").getJSONObject(
				"allpages").getString("apcontinue");

		return true;
	}

	private List<String[]> getPageInfo(JSONObject json) throws JSONException {
		if (!json.has("allpages")) {
			return null;
		}
		JSONArray jsonArray = getSubJSON(json, "query")
				.getJSONArray("allpages");
		String[] returnString = new String[3];
		List<String[]> returnList = new ArrayList<String[]>;
		for (int i = 0; i < jsonArray.length(); i++) {
			returnString[0] = jsonArray.getJSONObject(i).getString("pageid");
			returnString[1] = jsonArray.getJSONObject(i).getString("ns");
			returnString[2] = jsonArray.getJSONObject(i).getString("title");
		}

		return returnString;
	}

	private JSONObject getJSON(String input) throws JSONException {
		return new JSONObject(input);
	}

	private JSONObject getSubJSON(JSONObject json, String subObject)
			throws JSONException {
		return json.getJSONObject(subObject);
	}

	private String getEncoded(String input) throws UnsupportedEncodingException {
		return URLEncoder.encode(input, "UTF-8");
	}

}
